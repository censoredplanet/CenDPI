{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "protocol": {
        "type": "string",
        "description": "http or https or both"
      },
      "message": {
        "type": "object",
        "description": "Application-layer payload configuration",
        "properties": {
          "http": {
            "type": "object",
            "description": "Options for constructing an HTTP request payload",
            "properties": {
              "request": {
                "type": "string",
                "description": "The entire HTTP request message, where the host domain should be replaced with ${}"
              },
              "allCapsHostDomain": {
                "type": "boolean",
                "description": "Set true to make the Host header all caps",
                "default": false
              },
              "allLowerHostDomain": {
                "type": "boolean",
                "description": "Set true to make the Host header all lower case",
                "default": false
              },
              "padding": {
                "type": "boolean",
                "default": false,
                "description": "Set true to pad the request with a custom padding header"
              }
            },
            "required": ["request"],
            "additionalProperties": false
          },
          "tls": {
            "type": "object",
            "description": "Configuration for building and slicing multiple TLS records",
            "properties": {
              "clientHelloConfig": {
                "type": "object",
                "description": "For constructing a ClientHello handshake message",
                "properties": {
                  "chVersion": {
                    "type": "string",
                    "pattern": "^[0-9A-Fa-f]{4}$",
                    "description": "4 hex digits for the ClientHello legacy_version (e.g. '0303')",
                    "default": "0303"
                  },
                  "pqKeyShare": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set true to include pq key share in the ClientHello"
                  }
                },
                "additionalProperties": false
              },
              "records": {
                "type": "array",
                "description": "List of TLS records to build in order, some may slice from clienthello",
                "items": {
                  "type": "object",
                  "properties": {
                    "contentType": {
                      "type": "string",
                      "pattern": "^[0-9A-Fa-f]{2}$",
                      "description": "1-byte hex for the TLS record layer type, e.g. '16'"
                    },
                    "recordVersion": {
                      "type": "string",
                      "pattern": "^[0-9A-Fa-f]{4}$",
                      "description": "2-byte hex for the TLS record layer version, e.g. '0303'"
                    },
                    "payloadType": {
                     "type": "string",
                      "enum": [
                        "clienthello",
                        "hello_request",
                        "empty_handshake",
                        "empty_record",
                        "alert_warning"
                      ],
                      "description": "What to put in this record's payload"
                    },
                    "offset": {
                      "type": "integer",
                      "description": "Slice offset for clienthello (if payloadType=clienthello). In bytes.",
                      "default": 0
                    },
                    "length": {
                      "type": "integer",
                      "description": "Slice length for clienthello. -1 => until end. In bytes.",
                      "default": 0
                    },
                   "alertReasonHex": {
                      "type": "string",
                      "pattern": "^[0-9A-Fa-f]{2}$",
                      "description": "1-byte hex reason for alert_warning",
                      "default": "00"
                    }
                  },
                  "required": ["contentType","recordVersion","payloadType"],
                  "additionalProperties": false
                }
              }
            },
            "required": ["clientHelloConfig","records"],
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "packets": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "ethernet": {
              "type": "object",
              "properties": {
                "srcMac": {
                  "type": "string",
                  "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
                },
                "dstMac": {
                  "type": "string",
                  "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
                }
              },
              "required": ["srcMac", "dstMac"],
              "additionalProperties": false
            },
            "ip": {
              "type": "object",
              "properties": {
                "tos": {"type":"integer","minimum":0,"maximum":255,"default":0},
                "ttl": {"type":"integer","minimum":0,"maximum":255,"default":64},
                "id": {"type":"integer","minimum":0,"maximum":65535,"default":0},
                "protocol": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255,
                  "default": 6,
                  "description": "IP protocol number. Defaults to 6 (TCP) if not specified."
                },
                "fragmentOffset": {
                  "type":"integer",
                  "minimum":0,
                  "maximum":65535,
                  "default":0,
                  "description": "offset used in IP header, in 8-byte units"
                },
                "moreFragments": {
                  "type": "boolean",
                  "default": false,
                  "description": "Set true if more fragments follow"
                },
                "messageOffset": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "If taking payload from Message. In bytes, must be multiple of 8."
                },
                "messageLength": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Length of the fragment to extract. In bytes."
                },
                "reverseDomain": {
                  "type": "boolean",
                  "description": "If true, use the reverse of domain in request (same TCP checksum)",
                  "default": false
                },
                "ipOptions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ipOptionType": {"type":"integer","minimum":0,"maximum":255},
                      "ipOptionLength": {"type":"integer","minimum":2,"maximum":255},
                      "ipOptionData": {
                        "type":"string",
                        "pattern":"^[0-9A-Fa-f]*$",
                        "description":"Hex-encoded option data"
                      }
                    },
                    "required": ["ipOptionType","ipOptionLength"],
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "tcp": {
              "type": "object",
              "properties": {
                "window": {"type":"integer","minimum":0,"maximum":65535,"default":65535},
                "urgentPointer": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 65535,
                  "default": 0,
                  "description": "16-bit urgent pointer value"
                },
                "seqRelativeToInitial": {
                  "type": "integer",
                  "default": 0
                },
                "seqRelativeToExpected": {
                  "type": "integer",
                 "default": 0
                },
                "ackRelativeToExpected": {
                  "type": "integer",
                  "default": 0
                },
                "flags": {
                  "type": "object",
                  "properties": {
                    "syn": {"type":"boolean","default":false},
                    "ack": {"type":"boolean","default":false},
                    "psh": {"type":"boolean","default":false},
                    "fin": {"type":"boolean","default":false},
                    "rst": {"type":"boolean","default":false},
                    "urg": {"type":"boolean","default":false},
                    "ece": {"type":"boolean","default":false}
                  }
                },
                "data": {
                  "type": "string",
                  "pattern": "^[A-Za-z0-9+/]*={0,2}$",
                  "description": "Base64-encoded data for this segment if not using segmentOffset/segmentLength"
                },
                "tcpOptions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tcpOptionType": {"type":"integer"},
                      "tcpOptionLength": {"type":"integer","minimum":0},
                      "tcpOptionData": {
                        "type":"string",
                        "pattern":"^[0-9A-Fa-f]*$"
                      }
                    },
                    "required": ["tcpOptionType"],
                    "additionalProperties": false
                  }
                },
                "messageOffset": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "If taking payload from Message. In bytes."
                },
                "messageLength": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Length of the fragment to extract. In bytes."
                },
                "reverseDomain": {
                  "type": "boolean",
                  "description": "If true, use the reverse of domain in request (same TCP checksum)",
                  "default": false
                },
                "corruptChecksum": {
                  "type": "boolean",
                  "default": false,
                  "description": "Set true to corrupt the TCP checksum"
                }
              },
              "additionalProperties": false
            },
            "delay": {
              "type": "integer",
              "description": "Seconds to wait for any response packets",
              "default": 0
            }
          },
          "required": ["ethernet", "ip"],
          "additionalProperties": false
        }
      }
    },
    "additionalProperties": false
  }
  